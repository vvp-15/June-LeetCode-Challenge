class Solution {
public:
    void dfs(int i,int j,vector<vector<char>>& board){
        int n=board.size();
        int m = board[0].size();
        if(i>=n || i<0 ||j>=m || j<0) return;
        if(board[i][j]!='O') return;
        board[i][j]='V';
        dfs(i+1,j,board);
        dfs(i,j+1,board);
        dfs(i-1,j,board);
        dfs(i,j-1,board);
    }
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        if(n==0) return;
        int m = board[0].size();
            for(int j=0;j<n;j++){
                if(board[j][0]=='O'){
                    dfs(j,0,board);
                }
                if(board[j][m-1]=='O'){
                    dfs(j,m-1,board);
                }
            }
        for(int j=0;j<m;j++){
                if(board[0][j]=='O'){
                    dfs(0,j,board);
                }
                if(board[n-1][j]=='O'){
                    dfs(n-1,j,board);
                }
         }
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++){
                if(board[i][j]=='V') board[i][j]='O';
                else if(board[i][j]=='O') board[i][j]='X';
            }
                
            
    }
};
